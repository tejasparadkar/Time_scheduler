/*
 * Copyright (C) 2018 betaiotazeta
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.betaiotazeta.autoshiftplanner;

import java.io.File;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JSpinner;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.optaplanner.benchmark.api.PlannerBenchmark;
import org.optaplanner.benchmark.api.PlannerBenchmarkFactory;
import org.optaplanner.core.api.solver.Solver;
import org.optaplanner.core.api.solver.SolverFactory;
import org.optaplanner.core.api.solver.event.BestSolutionChangedEvent;
import org.optaplanner.core.api.solver.event.SolverEventListener;
import org.optaplanner.persistence.xstream.impl.domain.solution.XStreamSolutionFileIO;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.security.ArrayTypePermission;
import com.thoughtworks.xstream.security.NoTypePermission;

/**
 *
 * @author betaiotazeta
 */
public class AspApp extends javax.swing.JFrame {

    /**
     * Creates new form AspApp
     */
    public AspApp() {

        business = new Business(8.5, 21, 7);
        table = new Table(49, 25, business);
        configurator = new Configurator();

        /* testing
        table.printIdEmployee();
        table.printIdPeriod();
        table.printWorked();
        table.printTime();
        */
        
        staff = new ArrayList<Employee>();
        staff.add(new Employee("Martha", 40));
        staff.add(new Employee("Amelia", 21));
        staff.add(new Employee("Emily", 21));
        staff.add(new Employee("Sophie", 40));
        staff.add(new Employee("Grace", 40));
        staff.add(new Employee("Evelyn", 40));
        staff.add(new Employee("Layla", 40));

        initComponents();
        this.fillListBox();
        updateLabelHoursWorked();

        // System.out.println("isEventDispatchThread: " + javax.swing.SwingUtilities.isEventDispatchThread());
        // System.out.println("This thread is: " + Thread.currentThread());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        endTime_jLabel = new javax.swing.JLabel();
        startTime_jLabel = new javax.swing.JLabel();
        startTime_jSpinner = new javax.swing.JSpinner();
        endTime_jSpinner = new javax.swing.JSpinner();
        createNewBusiness_jButton = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        hoursPerWeek_jLabel = new javax.swing.JLabel();
        removeEmployee_jButton = new javax.swing.JButton();
        name_jLabel = new javax.swing.JLabel();
        employeeName_jTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        employees_jList = new javax.swing.JList<>();
        addEmployee_jButton = new javax.swing.JButton();
        hoursPerWeek_jSpinner = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel12 = new javax.swing.JPanel();
        hoursPerWeek_jCheckbox = new javax.swing.JCheckBox();
        hoursPerDay_jCheckBox = new javax.swing.JCheckBox();
        shiftsPerDay_jCheckBox = new javax.swing.JCheckBox();
        shiftLenght_jCheckBox = new javax.swing.JCheckBox();
        breakLenght_jCheckBox = new javax.swing.JCheckBox();
        employeesPerPeriod_jCheckBox = new javax.swing.JCheckBox();
        mandatoryShifts_jCheckBox = new javax.swing.JCheckBox();
        uniformEmployeesDistribution_jCheckBox = new javax.swing.JCheckBox();
        hoursPerDay_jSpinner = new javax.swing.JSpinner();
        shiftsPerDay_jSpinner = new javax.swing.JSpinner();
        shiftLenghtMax_jSpinner = new javax.swing.JSpinner();
        breakLenght_jSpinner = new javax.swing.JSpinner();
        employeesPerPeriod_jSpinner = new javax.swing.JSpinner();
        shiftLenghtMin_jSpinner = new javax.swing.JSpinner();
        overnightRest_jCheckBox = new javax.swing.JCheckBox();
        overnightRest_jSpinner = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        tablePanel1 = new org.betaiotazeta.autoshiftplanner.TablePanel(this);
        jPanel21 = new javax.swing.JPanel();
        worked_jRadioButton = new javax.swing.JRadioButton();
        forbidden_jRadioButton = new javax.swing.JRadioButton();
        mandatory_jRadioButton = new javax.swing.JRadioButton();
        jPanel23 = new javax.swing.JPanel();
        solve_jButton = new javax.swing.JButton();
        stop_jButton = new javax.swing.JButton();
        reset_jButton = new javax.swing.JButton();
        jProgressBar = new javax.swing.JProgressBar();
        score_jLabel = new javax.swing.JLabel();
        time_jLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel20 = new javax.swing.JPanel();
        employee1_jLabel = new javax.swing.JLabel();
        employee2_jLabel = new javax.swing.JLabel();
        employee3_jLabel = new javax.swing.JLabel();
        employee4_jLabel = new javax.swing.JLabel();
        employee5_jLabel = new javax.swing.JLabel();
        employee6_jLabel = new javax.swing.JLabel();
        employee7_jLabel = new javax.swing.JLabel();
        employee8_jLabel = new javax.swing.JLabel();
        employee9_jLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenu = new javax.swing.JMenuItem();
        saveMenu = new javax.swing.JMenuItem();
        benchmarkMenu = new javax.swing.JMenu();
        solverConfigMenu = new javax.swing.JMenuItem();
        benchmarkConfigMenu = new javax.swing.JMenuItem();
        benchmarkConfigTemplateMenu = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        usageMenu = new javax.swing.JMenuItem();
        websiteMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Auto Shift Planner");
        setPreferredSize(new java.awt.Dimension(800, 600));

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Timetable"));

        endTime_jLabel.setText("Closing time:");

        startTime_jLabel.setText("Opening time:");

        startTime_jSpinner.setModel(new javax.swing.SpinnerNumberModel(8.5d, 0.0d, 24.0d, 0.5d));
        startTime_jSpinner.setToolTipText("All values are expressed in hour units: e.g. for 8 hours and 30 minutes set 8.5, thanks!");

        endTime_jSpinner.setModel(new javax.swing.SpinnerNumberModel(21.0d, 0.0d, 24.0d, 0.5d));
        endTime_jSpinner.setToolTipText("All values are expressed in hour units: e.g. for 8 hours and 30 minutes set 8.5, thanks!");

        createNewBusiness_jButton.setText("Initialize");
        createNewBusiness_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewBusiness_jButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(createNewBusiness_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startTime_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(endTime_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(endTime_jSpinner)
                            .addComponent(startTime_jSpinner))))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startTime_jLabel)
                    .addComponent(startTime_jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endTime_jLabel)
                    .addComponent(endTime_jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createNewBusiness_jButton))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Employees"));

        hoursPerWeek_jLabel.setText("Hours per week:");

        removeEmployee_jButton.setText("Remove");
        removeEmployee_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeEmployee_jButtonActionPerformed(evt);
            }
        });

        name_jLabel.setText("Name:");

        employees_jList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        employees_jList.setVisibleRowCount(1);
        employees_jList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employees_jListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(employees_jList);

        addEmployee_jButton.setText("Add");
        addEmployee_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewEmployee_jButtonActionPerformed(evt);
            }
        });

        hoursPerWeek_jSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addComponent(name_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(employeeName_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addEmployee_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeEmployee_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addComponent(hoursPerWeek_jLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(hoursPerWeek_jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name_jLabel)
                    .addComponent(employeeName_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hoursPerWeek_jLabel)
                    .addComponent(hoursPerWeek_jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeEmployee_jButton)
                    .addComponent(addEmployee_jButton))
                .addContainerGap())
        );

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Constraints"));

        jPanel12.setPreferredSize(new java.awt.Dimension(347, 370));

        hoursPerWeek_jCheckbox.setSelected(true);
        hoursPerWeek_jCheckbox.setText("Hours per week:");

        hoursPerDay_jCheckBox.setSelected(true);
        hoursPerDay_jCheckBox.setText("Maximum hours per day:");

        shiftsPerDay_jCheckBox.setSelected(true);
        shiftsPerDay_jCheckBox.setText("Maximum shifts per day:");

        shiftLenght_jCheckBox.setSelected(true);
        shiftLenght_jCheckBox.setText("Shift lenght (min, max):");

        breakLenght_jCheckBox.setSelected(true);
        breakLenght_jCheckBox.setText("Eventual break length:");

        employeesPerPeriod_jCheckBox.setSelected(true);
        employeesPerPeriod_jCheckBox.setText("Minimum employees per period:");

        mandatoryShifts_jCheckBox.setSelected(true);
        mandatoryShifts_jCheckBox.setText("Mandatory shifts:");

        uniformEmployeesDistribution_jCheckBox.setSelected(true);
        uniformEmployeesDistribution_jCheckBox.setText("Uniformly distributed employees:");

        hoursPerDay_jSpinner.setModel(new javax.swing.SpinnerNumberModel(8.0d, 0.5d, 24.0d, 0.5d));
        hoursPerDay_jSpinner.setToolTipText("All values are expressed in hour units: e.g. for 8 hours and 30 minutes set 8.5, thanks!");

        shiftsPerDay_jSpinner.setModel(new javax.swing.SpinnerNumberModel(2, 1, 24, 1));

        shiftLenghtMax_jSpinner.setModel(new javax.swing.SpinnerNumberModel(6.0d, 0.5d, 24.0d, 0.5d));
        shiftLenghtMax_jSpinner.setToolTipText("All values are expressed in hour units: e.g. for 8 hours and 30 minutes set 8.5, thanks!");

        breakLenght_jSpinner.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.5d, 24.0d, 0.5d));
        breakLenght_jSpinner.setToolTipText("All values are expressed in hour units: e.g. for 8 hours and 30 minutes set 8.5, thanks!");

        employeesPerPeriod_jSpinner.setModel(new javax.swing.SpinnerNumberModel(2, 1, 9, 1));

        shiftLenghtMin_jSpinner.setModel(new javax.swing.SpinnerNumberModel(3.0d, 0.5d, 24.0d, 0.5d));
        shiftLenghtMin_jSpinner.setToolTipText("All values are expressed in hour units: e.g. for 8 hours and 30 minutes set 8.5, thanks!");

        overnightRest_jCheckBox.setSelected(true);
        overnightRest_jCheckBox.setText("Minimum overnight rest:");

        overnightRest_jSpinner.setModel(new javax.swing.SpinnerNumberModel(12.0d, 0.0d, 24.0d, 0.5d));
        overnightRest_jSpinner.setToolTipText("All values are expressed in hour units: e.g. for 8 hours and 30 minutes set 8.5, thanks!");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hoursPerDay_jCheckBox)
                            .addComponent(employeesPerPeriod_jCheckBox)
                            .addComponent(breakLenght_jCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hoursPerDay_jSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(breakLenght_jSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(employeesPerPeriod_jSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(shiftsPerDay_jCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(shiftsPerDay_jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(shiftLenght_jCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                        .addComponent(shiftLenghtMin_jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shiftLenghtMax_jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hoursPerWeek_jCheckbox)
                            .addComponent(mandatoryShifts_jCheckBox)
                            .addComponent(uniformEmployeesDistribution_jCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(overnightRest_jCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(overnightRest_jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hoursPerWeek_jCheckbox)
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hoursPerDay_jCheckBox)
                    .addComponent(hoursPerDay_jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shiftsPerDay_jCheckBox)
                    .addComponent(shiftsPerDay_jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shiftLenght_jCheckBox)
                    .addComponent(shiftLenghtMax_jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shiftLenghtMin_jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(breakLenght_jCheckBox)
                    .addComponent(breakLenght_jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeesPerPeriod_jCheckBox)
                    .addComponent(employeesPerPeriod_jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(overnightRest_jCheckBox)
                    .addComponent(overnightRest_jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(mandatoryShifts_jCheckBox)
                .addGap(18, 18, 18)
                .addComponent(uniformEmployeesDistribution_jCheckBox)
                .addContainerGap(231, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel12);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Home", jPanel1);

        tablePanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Editor"));

        javax.swing.GroupLayout tablePanel1Layout = new javax.swing.GroupLayout(tablePanel1);
        tablePanel1.setLayout(tablePanel1Layout);
        tablePanel1Layout.setHorizontalGroup(
            tablePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 589, Short.MAX_VALUE)
        );
        tablePanel1Layout.setVerticalGroup(
            tablePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder("Editing mode"));

        buttonGroup1.add(worked_jRadioButton);
        worked_jRadioButton.setText("Attribute hours");

        buttonGroup1.add(forbidden_jRadioButton);
        forbidden_jRadioButton.setText("Define forbidden");

        buttonGroup1.add(mandatory_jRadioButton);
        mandatory_jRadioButton.setText("Specify mandatory");

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(worked_jRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(forbidden_jRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mandatory_jRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(worked_jRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(forbidden_jRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mandatory_jRadioButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder("Solver"));

        solve_jButton.setText("Solve");
        solve_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solve_jButtonActionPerformed(evt);
            }
        });

        stop_jButton.setText("Stop");
        stop_jButton.setEnabled(false);
        stop_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stop_jButtonActionPerformed(evt);
            }
        });

        reset_jButton.setText("Reset");
        reset_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset_jButtonActionPerformed(evt);
            }
        });

        score_jLabel.setText("Score");

        time_jLabel.setText("Time");

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addComponent(solve_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reset_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stop_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addComponent(score_jLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(time_jLabel)))
                .addContainerGap())
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(score_jLabel)
                    .addComponent(time_jLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(solve_jButton)
                    .addComponent(reset_jButton)
                    .addComponent(stop_jButton))
                .addContainerGap())
        );

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Hours worked"));

        employee1_jLabel.setForeground(java.awt.Color.red);
        employee1_jLabel.setText("Employee1");

        employee2_jLabel.setForeground(java.awt.Color.blue);
        employee2_jLabel.setText("Employee2");

        employee3_jLabel.setForeground(java.awt.Color.green);
        employee3_jLabel.setText("Employee3");

        employee4_jLabel.setForeground(java.awt.Color.yellow);
        employee4_jLabel.setText("Employee4");

        employee5_jLabel.setForeground(java.awt.Color.magenta);
        employee5_jLabel.setText("Employee5");

        employee6_jLabel.setForeground(java.awt.Color.pink);
        employee6_jLabel.setText("Employee6");

        employee7_jLabel.setForeground(java.awt.Color.orange);
        employee7_jLabel.setText("Employee7");

        employee8_jLabel.setForeground(java.awt.Color.cyan);
        employee8_jLabel.setText("Employee8");

        employee9_jLabel.setForeground(java.awt.Color.lightGray);
        employee9_jLabel.setText("Employee9");

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addComponent(employee1_jLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(employee2_jLabel)
                            .addComponent(employee3_jLabel)
                            .addComponent(employee4_jLabel)
                            .addComponent(employee5_jLabel)
                            .addComponent(employee6_jLabel)
                            .addComponent(employee7_jLabel)
                            .addComponent(employee8_jLabel)
                            .addComponent(employee9_jLabel))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(employee1_jLabel)
                .addGap(18, 18, 18)
                .addComponent(employee2_jLabel)
                .addGap(18, 18, 18)
                .addComponent(employee3_jLabel)
                .addGap(18, 18, 18)
                .addComponent(employee4_jLabel)
                .addGap(18, 18, 18)
                .addComponent(employee5_jLabel)
                .addGap(18, 18, 18)
                .addComponent(employee6_jLabel)
                .addGap(18, 18, 18)
                .addComponent(employee7_jLabel)
                .addGap(18, 18, 18)
                .addComponent(employee8_jLabel)
                .addGap(18, 18, 18)
                .addComponent(employee9_jLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(jPanel20);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tablePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Editor", jPanel2);

        fileMenu.setText("File");

        openMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenu.setText("Open...");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openMenu);

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenu.setText("Save As...");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenu);

        jMenuBar1.add(fileMenu);

        benchmarkMenu.setText("Benchmark");

        solverConfigMenu.setText("Use SolverConfig");
        solverConfigMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solverConfigMenuActionPerformed(evt);
            }
        });
        benchmarkMenu.add(solverConfigMenu);

        benchmarkConfigMenu.setText("Use BenchmarkConfig");
        benchmarkConfigMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                benchmarkConfigMenuActionPerformed(evt);
            }
        });
        benchmarkMenu.add(benchmarkConfigMenu);

        benchmarkConfigTemplateMenu.setText("Use BenchmarkConfigTemplate");
        benchmarkConfigTemplateMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                benchmarkConfigTemplateMenuActionPerformed(evt);
            }
        });
        benchmarkMenu.add(benchmarkConfigTemplateMenu);

        jMenuBar1.add(benchmarkMenu);

        helpMenu.setText("Help");

        usageMenu.setText("Usage...");
        usageMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usageMenuActionPerformed(evt);
            }
        });
        helpMenu.add(usageMenu);

        websiteMenu.setText("Web Site...");
        websiteMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                websiteMenuActionPerformed(evt);
            }
        });
        helpMenu.add(websiteMenu);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void createNewBusiness_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewBusiness_jButtonActionPerformed
        try {            
            updateConfiguratorFromGui();
            
            double startTime = (double) startTime_jSpinner.getValue();
            startTime = (Math.round(startTime * 2))/2.0;
            startTime_jSpinner.setValue(startTime);

            double endTime = (double) endTime_jSpinner.getValue();
            endTime = (Math.round(endTime * 2))/2.0;
            endTime_jSpinner.setValue(endTime);
                        
            if (startTime >= endTime) {
                throw new IllegalArgumentException("End of business hours lower than the start time.");
            }

            int numberOfEmployees = staff.size();

            business = new Business(startTime, endTime, numberOfEmployees);

            int numberOfRows;
            int numberOfColumns;

            // multiplied by 7 for seven working days
            numberOfRows = numberOfEmployees * 7;

            // multiplied by 2 for half-hour intervals            
            double workingHours;
            workingHours = endTime - startTime;
            numberOfColumns = (int) Math.round(workingHours * 2);

            table = new Table(numberOfRows, numberOfColumns, business);

            repaint();

        } catch (IllegalArgumentException e) {
            String message = e.getMessage();
            JOptionPane.showMessageDialog(aspApp, message, "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_createNewBusiness_jButtonActionPerformed

    private void employees_jListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employees_jListMouseClicked
        // Reports the name and weekly hours of the employee from the jList in the jTextField fields
        String employeeName = (String) employees_jList.getSelectedValue();
        for (Employee employee : staff) {
            if (employeeName.equals(employee.getName())) {
                employeeName_jTextField.setText(employeeName);
                int hoursPerWeek = employee.getHoursPerWeek();
                hoursPerWeek_jSpinner.setValue(hoursPerWeek);
            }
        }
    }//GEN-LAST:event_employees_jListMouseClicked

    private void addNewEmployee_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewEmployee_jButtonActionPerformed
        try {
            String employeeName = employeeName_jTextField.getText();
            int hoursPerWeek = (int) hoursPerWeek_jSpinner.getValue();

            if (employeeName.equals("")) {
                throw new IllegalArgumentException("Enter the employee's name.");
            }
            if (staff.size() >= 9) {
                throw new IllegalArgumentException("Maximum number of employees already reached.");
            }

            staff.add(new Employee(employeeName, hoursPerWeek));
            this.fillListBox();
            updateLabelHoursWorked();            
            createNewBusiness_jButton.doClick();

        } catch (IllegalArgumentException e) {
            String message = e.getMessage();
            JOptionPane.showMessageDialog(aspApp, message, "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addNewEmployee_jButtonActionPerformed

    private void removeEmployee_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeEmployee_jButtonActionPerformed
        // Removes the employee

        String employeeName = employeeName_jTextField.getText();
        for (Iterator<Employee> myIterator = staff.iterator(); myIterator.hasNext();) {
            Employee employee = myIterator.next();
            if (employeeName.equals(employee.getName())) {
                myIterator.remove();
            }
        }

        this.fillListBox();
        updateLabelHoursWorked();
        createNewBusiness_jButton.doClick();
    }//GEN-LAST:event_removeEmployee_jButtonActionPerformed

    private void solve_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solve_jButtonActionPerformed
        
        if (staff.isEmpty()) {
            String message = "Please add employees first.";
            JOptionPane.showMessageDialog(aspApp, message, "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        startInstant = Instant.now();
        updateElapsedTime();
        
        jProgressBar.setIndeterminate(true);
        solve_jButton.setEnabled(false);
        stop_jButton.setEnabled(true);
        createNewBusiness_jButton.setEnabled(false);
        addEmployee_jButton.setEnabled(false);
        removeEmployee_jButton.setEnabled(false);
        reset_jButton.setEnabled(false);
        
        // SwingWorker thread:
        SwingWorker<Solution, Solution> worker = new SwingWorker<Solution, Solution>() {
            @Override
            protected Solution doInBackground() throws Exception {

                // Optaplanner:
                // Build the Solver
                SolverFactory<Solution> solverFactory = SolverFactory.createFromXmlResource(
                        "org/betaiotazeta/autoshiftplanner/solver/aspSolverConfig.xml");
                Solver<Solution> solver = solverFactory.buildSolver();
                aspApp.setSolver(solver);

                // Update the GUI everytime a better solution is found
                solver.addEventListener(new SolverEventListener<Solution>() {
                    public void bestSolutionChanged(BestSolutionChangedEvent<Solution> event) {
                        // if (event.getNewBestSolution().getScore().isSolutionInitialized()) {
                            // System.out.println("A new best solution event has been fired!");
                            publish(event.getNewBestSolution());
                        // }
                    }
                });

                // Load a problem
                solution = new SolutionGenerator(aspApp).createSolution();

                // Solve the problem
                Solution solvedSolution = solver.solve(solution);

                return solvedSolution;
            }

            @Override
            protected void process(List<Solution> chunks) {
                Solution interimSolution = chunks.get(chunks.size() - 1);
                
                // Display the result
                int interimHardScore = interimSolution.getScore().getHardScore();
                int interimSoftScore = interimSolution.getScore().getSoftScore();
                String text = (interimHardScore + " hard, " + interimSoftScore + " soft");
                score_jLabel.setText(text);

                // Reset the table
                int nR = table.getNumberOfRows();
                int nC = table.getnumberOfColumns();
                for (int i = 0; i < nR; i++) {
                    for (int j = 0; j < nC; j++) {
                        table.getCell(i, j).setWorked(false);
                    }
                }

                // Converts shifts into table                    
                List<ShiftAssignment> shiftAssignmentList = interimSolution.getShiftAssignmentList();
                for (ShiftAssignment shiftAssignment : shiftAssignmentList) {
                    if ((shiftAssignment.getTimeGrain() != null) && (shiftAssignment.getShiftDuration() != null)) {
                        int startingGrainOfDay = shiftAssignment.getTimeGrain().getStartingGrainOfDay();
                        int dayOfWeek = shiftAssignment.getTimeGrain().getDay().getDayOfWeek();
                        int durationInGrains = shiftAssignment.getShiftDuration().getDurationInGrains();
                        Employee employee = shiftAssignment.getShift().getEmployee();
                        int indexOfEmployee = interimSolution.getStaffScore().indexOf(employee);
                        int i = indexOfEmployee + (dayOfWeek * staff.size());
                        int finalGrainOfDay = startingGrainOfDay + durationInGrains;
                        if (finalGrainOfDay >= nC) {
                            int overflow = finalGrainOfDay - nC;
                            finalGrainOfDay = finalGrainOfDay - overflow;
                        }
                        for (int j = startingGrainOfDay; j < finalGrainOfDay; j++) {
                            table.getCell(i, j).setWorked(true);
                        }
                    }
                }

                updateHoursWorked();
                updateLabelHoursWorked();
                repaint();
            }

            @Override
            protected void done() {
                try {
                    timer.stop();
                    Solution solvedSolution = get();
                    solution = solvedSolution;

                    // Display the result
                    int solvedHardScore = solvedSolution.getScore().getHardScore();
                    int solvedSoftScore = solvedSolution.getScore().getSoftScore();
                    String message = "Solved score: " + solvedHardScore + " hard, " + solvedSoftScore + " soft.";
                    JOptionPane.showMessageDialog(aspApp, message, "Information", JOptionPane.INFORMATION_MESSAGE);
                  
                    // Reset the table
                    int nR = table.getNumberOfRows();
                    int nC = table.getnumberOfColumns();
                    for (int i = 0; i < nR; i++) {
                        for (int j = 0; j < nC; j++) {
                            table.getCell(i, j).setWorked(false);
                        }
                    }
                    
                    // Converts shifts into table
                    int overlappingShiftsCounter = 0; // only used for final report
                    List<ShiftAssignment> shiftAssignmentList = solution.getShiftAssignmentList();
                    for (ShiftAssignment shiftAssignment : shiftAssignmentList) {
                        if ((shiftAssignment.getTimeGrain() != null) && (shiftAssignment.getShiftDuration() != null)) {
                            int startingGrainOfDay = shiftAssignment.getTimeGrain().getStartingGrainOfDay();
                            int dayOfWeek = shiftAssignment.getTimeGrain().getDay().getDayOfWeek();
                            int durationInGrains = shiftAssignment.getShiftDuration().getDurationInGrains();
                            Employee employee = shiftAssignment.getShift().getEmployee();
                            int indexOfEmployee = solution.getStaffScore().indexOf(employee);
                            int i = indexOfEmployee + (dayOfWeek * staff.size());
                            int finalGrainOfDay = startingGrainOfDay + durationInGrains;
                            if (finalGrainOfDay >= nC) {
                                int overflow = finalGrainOfDay - nC;
                                finalGrainOfDay = finalGrainOfDay - overflow;
                            }
                            for (int j = startingGrainOfDay; j < finalGrainOfDay; j++) {
                                if (table.getCell(i, j).isWorked()) {
                                    overlappingShiftsCounter++;
                                }
                                table.getCell(i, j).setWorked(true);
                            }
                        }
                    }
                    
                    updateHoursWorked();
                    updateLabelHoursWorked();
                    repaint();

                    solve_jButton.setEnabled(true);
                    stop_jButton.setEnabled(false);
                    createNewBusiness_jButton.setEnabled(true);
                    addEmployee_jButton.setEnabled(true);
                    removeEmployee_jButton.setEnabled(true);
                    reset_jButton.setEnabled(true);
                    jProgressBar.setValue(jProgressBar.getMinimum());
                    jProgressBar.setIndeterminate(false);


                    // Generating report to stout
                    System.out.println("\nGenerating report:");

                    int shiftAssignmentListSize = shiftAssignmentList.size();
                    System.out.println("Quantity of planning entities (shiftAssignment): " + shiftAssignmentListSize);
                    int timeGrainListSize = solution.getTimeGrainList().size();
                    System.out.println("Quantity of planning values (timeGrain): " + timeGrainListSize);
                    int shiftDurationListSize = solution.getShiftDurationList().size();
                    System.out.println("Quantity of planning values (shiftDuration): " + shiftDurationListSize);
                    System.out.println("INFO: " + overlappingShiftsCounter + " cells have overlapping shifts!");

                    // Normalizing assigned timeGrains and shiftDurations in shiftAssignments
                    // WARNING: information loss can occur if setting are incopatible!
                    // Un-set all assigned timeGrains and shiftDurations from shiftAssignments
                    for (ShiftAssignment shiftAssignment : shiftAssignmentList) {
                        shiftAssignment.setTimeGrain(null);
                        shiftAssignment.setShiftDuration(null);
                    }
                    
                    // Re-assign timeGrains and shiftDurations to shiftAssignments according to table
                    convertTableIntoShifts();
                    
                    // Print assignments
                    int i = 0;
                    for (ShiftAssignment shiftAssignment : shiftAssignmentList) {
                        Shift shift = shiftAssignment.getShift();
                        TimeGrain timeGrain = shiftAssignment.getTimeGrain();
                        ShiftDuration shiftDuration = shiftAssignment.getShiftDuration();
                        System.out.println("shiftAssignment: (indexInArray-" + i + ")" + " with shift " + shift.toString() + ", has timeGrain: " + timeGrain + ", has shiftDuration: " + shiftDuration);
                        i = i + 1;
                    }

                } catch (InterruptedException ex) {
                    String message = ex.getMessage();
                    JOptionPane.showMessageDialog(aspApp, message, "Error", JOptionPane.ERROR_MESSAGE);
                    System.out.println(message);
                    ex.printStackTrace();
                } catch (ExecutionException ex) {
                    String message = ex.getMessage();
                    JOptionPane.showMessageDialog(aspApp, message, "Error", JOptionPane.ERROR_MESSAGE);
                    System.out.println(message);
                    ex.printStackTrace();
                }
            }
        };
        worker.execute();
    }//GEN-LAST:event_solve_jButtonActionPerformed

    private void stop_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop_jButtonActionPerformed
        // Stops solving
        // The worker's thread sometimes ends up soon after, sometimes it takes a while
        solver.terminateEarly();        
        solution = solver.getBestSolution();

        timer.stop();
        solve_jButton.setEnabled(true);
        stop_jButton.setEnabled(false);
        createNewBusiness_jButton.setEnabled(true);
        addEmployee_jButton.setEnabled(true);
        removeEmployee_jButton.setEnabled(true);
        reset_jButton.setEnabled(true);
        jProgressBar.setValue(jProgressBar.getMinimum());
        jProgressBar.setIndeterminate(false);
    }//GEN-LAST:event_stop_jButtonActionPerformed

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
        // Load solution

        try {
            File dataDir = new File("data/unsolved");
            JFileChooser chooser = new JFileChooser(dataDir);
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "XML Files", "xml");
            chooser.setFileFilter(filter);
            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                File inputSolutionFile = chooser.getSelectedFile();
                XStreamSolutionFileIO myXStreamSolutionFileIO = new XStreamSolutionFileIO(Solution.class);
                // customizing XStream
                XStream xstream = myXStreamSolutionFileIO.getXStream();
                // xstream.aliasPackage("package", "org.betaiotazeta.autoshiftplanner");
                // xstream.processAnnotations(Solution.class);      

                // The inputSolutionFile needs to come from a trusted source:
                // if it contains malicious data, it can be exploited.
                // The XStreamSolutionFileIO disables the XStream security framework,
                // so it just works out of the box.
                // We use XStreamSolutionFileIO.getXStream() to re-enable the security
                // framework and explicitly whitelist all marshalled classes.
                
                // clear out existing permissions and set own ones
                xstream.addPermission(NoTypePermission.NONE);
                // allow some basics
                // // xstream.addPermission(NullPermission.NULL);
                // // xstream.addPermission(PrimitiveTypePermission.PRIMITIVES);
                xstream.addPermission(ArrayTypePermission.ARRAYS);
                // allow any type from the same package
                xstream.allowTypesByWildcard(new String[]{
                    AspApp.class.getPackage().getName() + ".*"
                });

                solution = (Solution) myXStreamSolutionFileIO.read(inputSolutionFile);
            } else {
                return;
            }

            staff = solution.getStaffScore();
            table = solution.getTableScore();
            business = solution.getBusiness();
            configurator = solution.getConfigurator();

            startTime_jSpinner.setValue(business.getStartTime());
            endTime_jSpinner.setValue(business.getEndTime());

            updateGuiFromConfigurator();
            updateLabelHoursWorked();
            fillListBox();
            repaint();
        } catch (Exception e) {
            String message = e.getMessage();
            JOptionPane.showMessageDialog(aspApp, message, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_openMenuActionPerformed

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
        // Save solution:
        
        solution = new SolutionGenerator(aspApp).createSolution();
        
        File dataDir = new File("data/solved");
        JFileChooser chooser = new JFileChooser(dataDir);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "XML Files", "xml");
        chooser.setFileFilter(filter);
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            File outputSolutionFile = chooser.getSelectedFile();
            String filePath = outputSolutionFile.getAbsolutePath();
            if (!filePath.toLowerCase().endsWith(".xml")) {
                filePath += ".xml";
                outputSolutionFile = new File(filePath);
            }
            XStreamSolutionFileIO myXStreamSolutionFileIO = new XStreamSolutionFileIO(Solution.class);
            // XStream xstream = myXStreamSolutionFileIO.getXStream();
            // xstream.aliasPackage("package", "org.betaiotazeta.autoshiftplanner");
            // xstream.processAnnotations(Solution.class);
            myXStreamSolutionFileIO.write(solution, outputSolutionFile);
        }

        /*
        String xml = xstream.toXML(solution);
        System.out.println(xml);
        */
    }//GEN-LAST:event_saveMenuActionPerformed

    private void solverConfigMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solverConfigMenuActionPerformed
        // SIMPLE NO-CONFIG BENCHMARK (uses Solver Config)
        if (!isBenchmarkingAllowed()) {
            return;
        }

        SolverFactory<Solution> solverFactory = SolverFactory.createFromXmlResource("org/betaiotazeta/autoshiftplanner/solver/aspSolverConfig.xml");
        PlannerBenchmarkFactory benchmarkFactory = PlannerBenchmarkFactory.createFromSolverFactory(solverFactory);
        File inputSolutionFile = new File("data/unsolved/asp_7employees_forbidden_mandatory.xml");
        XStreamSolutionFileIO myXStreamSolutionFileIO = new XStreamSolutionFileIO(Solution.class);
        Solution dataset1 = (Solution) myXStreamSolutionFileIO.read(inputSolutionFile);
        // Solution dataset2 = ...;
        // Solution dataset3 = ...;
        PlannerBenchmark plannerBenchmark = benchmarkFactory.buildPlannerBenchmark(dataset1);
        plannerBenchmark.benchmark();
    }//GEN-LAST:event_solverConfigMenuActionPerformed

    private void benchmarkConfigMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_benchmarkConfigMenuActionPerformed
        // USES aspBenchmarkConfig.xml
        if (!isBenchmarkingAllowed()) {
            return;
        }

        PlannerBenchmarkFactory plannerBenchmarkFactory = PlannerBenchmarkFactory.createFromXmlResource("org/betaiotazeta/autoshiftplanner/benchmark/aspBenchmarkConfig.xml");
        PlannerBenchmark plannerBenchmark = plannerBenchmarkFactory.buildPlannerBenchmark();
        plannerBenchmark.benchmark();
    }//GEN-LAST:event_benchmarkConfigMenuActionPerformed

    private void benchmarkConfigTemplateMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_benchmarkConfigTemplateMenuActionPerformed
        // USES Freemarker template aspBenchmarkConfigTemplate.xml.ftl
        if (!isBenchmarkingAllowed()) {
            return;
        }

        PlannerBenchmarkFactory plannerBenchmarkFactory = PlannerBenchmarkFactory.createFromFreemarkerXmlResource("org/betaiotazeta/autoshiftplanner/benchmark/aspBenchmarkConfigTemplate.xml.ftl");
        PlannerBenchmark plannerBenchmark = plannerBenchmarkFactory.buildPlannerBenchmark();
        plannerBenchmark.benchmark();
    }//GEN-LAST:event_benchmarkConfigTemplateMenuActionPerformed

    private boolean isBenchmarkingAllowed() {   
        // bechmarking should not be available in production
        // allowBenchmark: used to enable-disable bechmarking
        boolean allowBenchmark = true;
        // we don't want to allow benchmarking from a jar file
        File checkJar = new File("data"); // folder data is absent in a jar file
        if (!(allowBenchmark && checkJar.exists())) {
            String message = "Benchmarking is intended and available for developers only.";
            JOptionPane.showMessageDialog(aspApp, message, "Warning", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        return true;
    }

    private void reset_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset_jButtonActionPerformed
        // reset the boolean value field worked for all cells in the table to false
        int nR = table.getNumberOfRows();
        int nC = table.getnumberOfColumns();
        for (int i = 0; i < nR; i++) {
            for (int j = 0; j < nC; j++) {
                table.getCell(i, j).setWorked(false);
            }
        }

        updateHoursWorked();
        updateLabelHoursWorked();
        repaint();
    }//GEN-LAST:event_reset_jButtonActionPerformed

    private void usageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usageMenuActionPerformed
        try {
            String usageUrl = "https://betaiotazeta.github.io/AutoShiftPlanner/usage.html";
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(usageUrl));
        }
        catch (Exception ex) {
            String message = ex.getMessage();
            JOptionPane.showMessageDialog(aspApp, message, "Error", JOptionPane.ERROR_MESSAGE);
            message = "Please, view page: https://betaiotazeta.github.io/AutoShiftPlanner/usage.html";
            JOptionPane.showMessageDialog(aspApp, message, "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_usageMenuActionPerformed

    private void websiteMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_websiteMenuActionPerformed
        try {
            String websiteUrl = "https://betaiotazeta.github.io/AutoShiftPlanner";
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(websiteUrl));
        } catch (Exception ex) {
            String message = ex.getMessage();
            JOptionPane.showMessageDialog(aspApp, message, "Error", JOptionPane.ERROR_MESSAGE);
            message = "Please, view site: https://betaiotazeta.github.io/AutoShiftPlanner";
            JOptionPane.showMessageDialog(aspApp, message, "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_websiteMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AspApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AspApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AspApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AspApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        /* Logging related stuff; later implemented in logback.xml
        // dirty hack to stop all logging - WORKS
        LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();
        loggerContext.stop();
        
        final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());
        Logger logger = LoggerFactory.getLogger(AspApp.class);
        logger.info("Hello World");
         */
        
        // display benchmark aggregator
        /*
        if (false) {
            PlannerBenchmarkFactory plannerBenchmarkFactory = PlannerBenchmarkFactory.createFromXmlResource("org/betaiotazeta/autoshiftplanner/benchmark/aspBenchmarkConfig.xml");
            BenchmarkAggregatorFrame.createAndDisplay(plannerBenchmarkFactory);
        }
        */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                aspApp = new AspApp();
                aspApp.setVisible(true);
            }
        });
    }

    // puts the names of the employees in the jList
    private void fillListBox() {
        DefaultListModel dlm = new DefaultListModel();
        String employeeName;
        for (Employee employee : staff) {
            employeeName = employee.getName();
            dlm.addElement(employeeName);
            // comboBox_name.addItem(item);
        }
        employees_jList.setModel(dlm);
    }

    public Table getTable() {
        return table;
    }

    public Business getBusiness() {
        return business;
    }

    public ArrayList<Employee> getStaff() {
        return staff;
    }

    public Solver<Solution> getSolver() {
        return solver;
    }

    public void setSolver(Solver<Solution> solver) {
        this.solver = solver;
    }

    public Solution getSolution() {
        return solution;
    }

    public void setSolution(Solution solution) {
        this.solution = solution;
    }

    public Configurator getConfigurator() {
        return configurator;
    }

    public void setConfigurator(Configurator configurator) {
        this.configurator = configurator;
    }
    
    public JRadioButton getForbidden_jRadioButton() {
        return forbidden_jRadioButton;
    }

    public JRadioButton getWorked_jRadioButton() {
        return worked_jRadioButton;
    }

    public JRadioButton getMandatory_jRadioButton() {
        return mandatory_jRadioButton;
    }
    
    // Getters for the configurator
    public JCheckBox getBreakLenght_jCheckBox() {
        return breakLenght_jCheckBox;
    }

    public JCheckBox getEmployeesPerPeriod_jCheckBox() {
        return employeesPerPeriod_jCheckBox;
    }

    public JCheckBox getHoursPerDay_jCheckBox() {
        return hoursPerDay_jCheckBox;
    }

    public JCheckBox getHoursPerWeek_jCheckbox() {
        return hoursPerWeek_jCheckbox;
    }
    
    public JCheckBox getMandatoryShifts_jCheckBox() {
        return mandatoryShifts_jCheckBox;
    }

    public JCheckBox getShiftLenght_jCheckBox() {
        return shiftLenght_jCheckBox;
    }

    public JCheckBox getShiftsPerDay_jCheckBox() {
        return shiftsPerDay_jCheckBox;
    }

    public JCheckBox getUniformEmployeesDistribution_jCheckBox() {
        return uniformEmployeesDistribution_jCheckBox;
    }    

    public JSpinner getjSpinner1() {
        return hoursPerDay_jSpinner;
    }

    public JSpinner getjSpinner2() {
        return shiftsPerDay_jSpinner;
    }

    public JSpinner getjSpinner3() {
        return shiftLenghtMax_jSpinner;
    }

    public JSpinner getjSpinner4() {
        return breakLenght_jSpinner;
    }

    public JSpinner getjSpinner5() {
        return employeesPerPeriod_jSpinner;
    }

    public JSpinner getjSpinner6() {
        return shiftLenghtMin_jSpinner;
    }

    // Update graphic components related to the configurator
    public void updateGuiFromConfigurator() {
        breakLenght_jCheckBox.setSelected(configurator.isBreakLenghtCheck());
        employeesPerPeriod_jCheckBox.setSelected(configurator.isEmployeesPerPeriodCheck());
        hoursPerDay_jCheckBox.setSelected(configurator.isHoursPerDayCheck());
        hoursPerWeek_jCheckbox.setSelected(configurator.isHoursPerWeekCheck());
        mandatoryShifts_jCheckBox.setSelected(configurator.isMandatoryShiftsCheck());
        shiftLenght_jCheckBox.setSelected(configurator.isShiftLenghtCheck());
        shiftsPerDay_jCheckBox.setSelected(configurator.isShiftsPerDayCheck());
        overnightRest_jCheckBox.setSelected(configurator.isOvernightRestCheck());
        uniformEmployeesDistribution_jCheckBox.setSelected(configurator.isUniformEmployeesDistributionCheck());
        
        breakLenght_jSpinner.setValue(configurator.getBreakLenght());
        employeesPerPeriod_jSpinner.setValue(configurator.getEmployeesPerPeriod());
        hoursPerDay_jSpinner.setValue(configurator.getHoursPerDay());
        shiftLenghtMax_jSpinner.setValue(configurator.getShiftLenghtMax());
        shiftLenghtMin_jSpinner.setValue(configurator.getShiftLenghtMin());
        shiftsPerDay_jSpinner.setValue(configurator.getShiftsPerDay());
        overnightRest_jSpinner.setValue(configurator.getOvernightRest());
    }

    // Update graphic components related to the configurator
    public void updateConfiguratorFromGui() {
        configurator.setBreakLenghtCheck(breakLenght_jCheckBox.isSelected());
        configurator.setEmployeesPerPeriodCheck(employeesPerPeriod_jCheckBox.isSelected());
        configurator.setHoursPerDayCheck(hoursPerDay_jCheckBox.isSelected());
        configurator.setHoursPerWeekCheck(hoursPerWeek_jCheckbox.isSelected());
        configurator.setMandatoryShiftsCheck(mandatoryShifts_jCheckBox.isSelected());
        configurator.setShiftLenghtCheck(shiftLenght_jCheckBox.isSelected());
        configurator.setShiftsPerDayCheck(shiftsPerDay_jCheckBox.isSelected());
        configurator.setOvernightRestCheck(overnightRest_jCheckBox.isSelected());
        configurator.setUniformEmployeesDistributionCheck(uniformEmployeesDistribution_jCheckBox.isSelected());

        configurator.setEmployeesPerPeriod((int) employeesPerPeriod_jSpinner.getValue());

        configurator.setShiftsPerDay((int) shiftsPerDay_jSpinner.getValue());

        double breakLenght = (double) breakLenght_jSpinner.getValue();
        // ensures that we work in half-hour units: e.g. 8.5 for 8:30, 8.3 is converted in 8.5
        // conversion will be done in AspEasyScoreCalculator anyway, ensures consistency of gui with code
        breakLenght = (Math.round(breakLenght * 2)) / 2.0;
        breakLenght_jSpinner.setValue(breakLenght);
        configurator.setBreakLenght(breakLenght);

        double hoursPerDay = (double) hoursPerDay_jSpinner.getValue();
        hoursPerDay = (Math.round(hoursPerDay * 2)) / 2.0;
        hoursPerDay_jSpinner.setValue(hoursPerDay);
        configurator.setHoursPerDay(hoursPerDay);

        double shiftLenghtMax = (double) shiftLenghtMax_jSpinner.getValue();
        shiftLenghtMax = (Math.round(shiftLenghtMax * 2)) / 2.0;
        shiftLenghtMax_jSpinner.setValue(shiftLenghtMax);
        configurator.setShiftLenghtMax(shiftLenghtMax);

        double shiftLenghtMin = (double) shiftLenghtMin_jSpinner.getValue();
        shiftLenghtMin = (Math.round(shiftLenghtMin * 2)) / 2.0;
        shiftLenghtMin_jSpinner.setValue(shiftLenghtMin);
        configurator.setShiftLenghtMin(shiftLenghtMin);

        double overnightRest = (double) overnightRest_jSpinner.getValue();
        overnightRest = (Math.round(overnightRest * 2)) / 2.0;
        overnightRest_jSpinner.setValue(overnightRest);
        configurator.setOvernightRest(overnightRest);
    }
    
    // Update the hour labels for everyone
    public void updateLabelHoursWorked() {
        
        employee1_jLabel.setText("");
        employee2_jLabel.setText("");
        employee3_jLabel.setText("");
        employee4_jLabel.setText("");
        employee5_jLabel.setText("");
        employee6_jLabel.setText("");
        employee7_jLabel.setText("");
        employee8_jLabel.setText("");
        employee9_jLabel.setText("");
        
        Employee employee;
        byte idEmployee;

        for (int i = 0; i < staff.size(); i++) {
            employee = staff.get(i);
            idEmployee = (byte) (i + 1);

            String employeeName = employee.getName();
            int hoursPerWeek = employee.getHoursPerWeek();
            double hoursWorked = employee.getHoursWorked();

            String stringLabel = employeeName + " has " + hoursWorked + " hours of " + hoursPerWeek;

            if (idEmployee == 1) {
                employee1_jLabel.setText(stringLabel);
            } else if (idEmployee == 2) {
                employee2_jLabel.setText(stringLabel);
            } else if (idEmployee == 3) {
                employee3_jLabel.setText(stringLabel);
            } else if (idEmployee == 4) {
                employee4_jLabel.setText(stringLabel);
            } else if (idEmployee == 5) {
                employee5_jLabel.setText(stringLabel);
            } else if (idEmployee == 6) {
                employee6_jLabel.setText(stringLabel);
            } else if (idEmployee == 7) {
                employee7_jLabel.setText(stringLabel);
            } else if (idEmployee == 8) {
                employee8_jLabel.setText(stringLabel);
            } else if (idEmployee == 9) {
                employee9_jLabel.setText(stringLabel);
            }
        }
    }

    // Updates the hours worked by all employees from the data in the table
    public void updateHoursWorked() {

        byte idEmployee; // employee code (array position)
        boolean status; // employee present or not
        Employee employee; // the employee on which to operate

        // reset of all hours performed for everyone
        for (int i = 0; i < staff.size(); i++) {
            employee = staff.get(i);
            employee.setHoursWorked(0);
        }

        int nR = table.getNumberOfRows();
        int nC = table.getnumberOfColumns();

        // attention: values of nR and nC start at 0
        for (int i = 0; i < nR; i++) {
            for (int j = 0; j < nC; j++) {
                status = table.getCell(i, j).isWorked();
                if (status) {
                    idEmployee = table.getCell(i, j).getIdEmployee();
                    // IdEmployee count starts at 1.
                    // Position in arrayList starts at 0. Subtracting 1.
                    employee = staff.get(idEmployee - 1);
                    employee.setHoursWorked(employee.getHoursWorked() + 0.5);
                }
            }
        }
    }

    public void updateElapsedTime() {
        timer = new Timer(1000, new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Instant stopInstant = Instant.now();
                Duration duration = Duration.between(startInstant, stopInstant);
                long s = duration.getSeconds();
                String text = String.format("%d:%02d:%02d", s / 3600, (s % 3600) / 60, (s % 60));
                time_jLabel.setText(text);              
                // repaint();
            }
        });
        timer.start();
    }

    // Converts data from cells (in table) into shiftAssignment (in solution)
    public void convertTableIntoShifts() {
        int nR = table.getNumberOfRows();
        int nC = table.getnumberOfColumns();

        List<ShiftAssignment> shiftAssignmentList = solution.getShiftAssignmentList();
        List<ShiftDuration> shiftDurationList = solution.getShiftDurationList();

        for (int i = 0; i < nR; i++) {
            for (int j = 0; j < nC; j++) {
                ShiftDuration shiftDuration;
                boolean status = false;
                int shiftStart = -1;
                status = table.getCell(i, j).isWorked();
                while (status) {
                    if (shiftStart == -1) {
                        shiftStart = j;
                    }
                    j = j + 1;
                    if (j < nC) {
                        status = table.getCell(i, j).isWorked();
                    } else {
                        status = false;
                    }
                }
                if (shiftStart == -1) {
                    // do nothing
                } else {
                    // convert into shift
                    //  idEployee needs to be corrected because indexOfEmployee starts at 0: -1
                    int idEmployee = table.getCell(i, shiftStart).getIdEmployee() - 1;
                    //  periods and timeGrains are essentially the same thing
                    //  idPeriod needs to be corrected because grainIndex starts at 0: -1
                    int grainIndex = table.getCell(i, shiftStart).getIdPeriod() - 1;
                    int durationInGrains = (j - shiftStart); // column j means first non worked cell

                    boolean done = false;
                    int index = 0;
                    int maxIndex = shiftDurationList.size() - 1;
                    do {
                        shiftDuration = shiftDurationList.get(index);
                        if (durationInGrains == shiftDuration.getDurationInGrains()) {
                            done = true;
                            index = 0;
                        }
                        index++;
                        if (maxIndex < index) {
                            String message = "A shift has a length of: " + durationInGrains + " grains, which is uncompatible with constraints settings.";
                            JOptionPane.showMessageDialog(aspApp, message, "Warning", JOptionPane.WARNING_MESSAGE);
                            done = true;
                            return;
                        }
                    } while (!done);

                    done = false;
                    index = 0;
                    maxIndex = shiftAssignmentList.size() - 1;
                    do {
                        ShiftAssignment shiftAssignment = shiftAssignmentList.get(index);
                        int indexOfEmployee = solution.getStaffScore().indexOf(shiftAssignment.getShift().getEmployee());
                        if ((idEmployee == indexOfEmployee)
                                && ((shiftAssignment.getTimeGrain() == null) || (shiftAssignment.getShiftDuration() == null))) {
                            // assigning...
                            shiftAssignment.setTimeGrain(solution.getTimeGrainList().get(grainIndex));
                            shiftAssignment.setShiftDuration(shiftDuration);
                            done = true;
                            index = 0;
                        }
                        index++;
                        if (maxIndex < index) {
                            String employeeName = solution.getStaffScore().get(idEmployee).getName();
                            String message = "Cannot assign a shift! " + "Employee: " + employeeName + ", grainIndex: " + grainIndex + ", duration:" + durationInGrains + ". Please, check settings.";
                            JOptionPane.showMessageDialog(aspApp, message, "Warning", JOptionPane.WARNING_MESSAGE);
                            done = true;
                            return;
                        }
                    } while (!done);
                }
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEmployee_jButton;
    private javax.swing.JMenuItem benchmarkConfigMenu;
    private javax.swing.JMenuItem benchmarkConfigTemplateMenu;
    private javax.swing.JMenu benchmarkMenu;
    private javax.swing.JCheckBox breakLenght_jCheckBox;
    private javax.swing.JSpinner breakLenght_jSpinner;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton createNewBusiness_jButton;
    private javax.swing.JLabel employee1_jLabel;
    private javax.swing.JLabel employee2_jLabel;
    private javax.swing.JLabel employee3_jLabel;
    private javax.swing.JLabel employee4_jLabel;
    private javax.swing.JLabel employee5_jLabel;
    private javax.swing.JLabel employee6_jLabel;
    private javax.swing.JLabel employee7_jLabel;
    private javax.swing.JLabel employee8_jLabel;
    private javax.swing.JLabel employee9_jLabel;
    private javax.swing.JTextField employeeName_jTextField;
    private javax.swing.JCheckBox employeesPerPeriod_jCheckBox;
    private javax.swing.JSpinner employeesPerPeriod_jSpinner;
    private javax.swing.JList<String> employees_jList;
    private javax.swing.JLabel endTime_jLabel;
    private javax.swing.JSpinner endTime_jSpinner;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JRadioButton forbidden_jRadioButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JCheckBox hoursPerDay_jCheckBox;
    private javax.swing.JSpinner hoursPerDay_jSpinner;
    private javax.swing.JCheckBox hoursPerWeek_jCheckbox;
    private javax.swing.JLabel hoursPerWeek_jLabel;
    private javax.swing.JSpinner hoursPerWeek_jSpinner;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox mandatoryShifts_jCheckBox;
    private javax.swing.JRadioButton mandatory_jRadioButton;
    private javax.swing.JLabel name_jLabel;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JCheckBox overnightRest_jCheckBox;
    private javax.swing.JSpinner overnightRest_jSpinner;
    private javax.swing.JButton removeEmployee_jButton;
    private javax.swing.JButton reset_jButton;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JLabel score_jLabel;
    private javax.swing.JSpinner shiftLenghtMax_jSpinner;
    private javax.swing.JSpinner shiftLenghtMin_jSpinner;
    private javax.swing.JCheckBox shiftLenght_jCheckBox;
    private javax.swing.JCheckBox shiftsPerDay_jCheckBox;
    private javax.swing.JSpinner shiftsPerDay_jSpinner;
    private javax.swing.JButton solve_jButton;
    private javax.swing.JMenuItem solverConfigMenu;
    private javax.swing.JLabel startTime_jLabel;
    private javax.swing.JSpinner startTime_jSpinner;
    private javax.swing.JButton stop_jButton;
    private org.betaiotazeta.autoshiftplanner.TablePanel tablePanel1;
    private javax.swing.JLabel time_jLabel;
    private javax.swing.JCheckBox uniformEmployeesDistribution_jCheckBox;
    private javax.swing.JMenuItem usageMenu;
    private javax.swing.JMenuItem websiteMenu;
    private javax.swing.JRadioButton worked_jRadioButton;
    // End of variables declaration//GEN-END:variables

    // Manual variables declaration
    // used to pass the JFrame in the InnerClass in the SwingWorker
    private static AspApp aspApp;

    // business: reference to a business object
    private Business business;

    // table: reference to a table type object composed of arrays of cells
    private Table table;

    // staff: each employee is an object contained in the ArrayList
    private ArrayList<Employee> staff;

    // solver: reference to the Optaplanner solver object
    private Solver<Solution> solver;
    
    // solution: reference to the solution object
    private Solution solution;
    
    // configurator: reference to the configurator object
    private Configurator configurator;
    
    // timer: used for displaying elapsed time during solving
    private Timer timer;
    
    // instant: used for displaying elapsed time during solving
    private Instant startInstant;
}